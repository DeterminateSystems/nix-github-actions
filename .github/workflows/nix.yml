# Our desired pipeline using only a Nix shell environment
name: Check and build the TODOs API (Nix)

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - main

jobs:
  check_nix:
    name: Check TODOs API
    runs-on: ubuntu-22.04
    steps:
      - name: git checkout
        uses: actions/checkout@v3
      - name: Install Nix
        uses: cachix/install-nix-action@v17
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      # Nix-specific logic begins here
      - name: Check Rust formatting
        run: nix develop .#ci --command ci-check-rust-formatting
      - name: Audit Rust code
        run: nix develop .#ci --command ci-cargo-audit
      - name: editorconfig check
        run: nix develop .#ci --command ci-check-editorconfig
      - name: Check spelling
        run: nix develop .#ci --command ci-check-spelling

  build_and_test_nix:
    name: Test and build TODOs API
    needs: check_nix
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-12]
    runs-on: ubuntu-22.04
    steps:
      - name: git checkout
        uses: actions/checkout@v3
      - name: Install Nix
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Set up Rust cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: todos-app-${{ hashFiles('**/Cargo.lock') }}
      - name: Test TODOs API
        run: nix develop .#ci --command ci-cargo-test
      - name: Build TODOs API
        run: nix build
      - name: Build TODOs image
        run: nix build .#docker
